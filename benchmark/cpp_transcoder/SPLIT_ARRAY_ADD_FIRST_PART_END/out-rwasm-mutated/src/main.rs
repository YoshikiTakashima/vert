static mut PARAM1: [i32 ; 2] = [12,12];
static mut PARAM2: i32 = 12;
static mut PARAM3: i32 = 12;
static mut RESULT: void = 12;
v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
qv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
qv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
*v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
*v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
$v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
"v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
"v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
"v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
"v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
%v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
%v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
%v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
'v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
kv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
/v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
/v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
7v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
9v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
+v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
/v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
/v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
zv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
*v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
xv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
hv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
3v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
1v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
4v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
5v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
0v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
6v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
?v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
vv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
!v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
#v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
[v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
]v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
gv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
*v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
8v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
yv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
bv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
&v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
,v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
-v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
<v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
>v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
cv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
2v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
fv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
iv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
{v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
=v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
Mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
:v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
mv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ov0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
dv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
lv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
ev0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
_v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
sv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
tv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
.v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
uv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
nv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
wv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
rv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
av0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
pv0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
(v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
)v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
;v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}

v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
 v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}
}v0 = TaggedVal::from(unsafe {
	PARAM1[0] = kani::any();
	kani::assume((0..2).contains(&PARAM1[0]));
	PARAM1[0]
});

let retval = v0.try_as_void()?;
unsafe {
RESULT = retval;
}


fn f_gold_wasm_thread_unsafe() -> void {
	let mut wasm_module = WasmModule::new();
	wasm_module._start().unwrap();
	unsafe { RESULT }
}

////// LLM Output //////
fn min(x: i32, y: i32) -> i32 {if x < y { x } else { y } }
fn max(x: i32, y: i32) -> i32 {if x > y { x } else { y }}
fn cmpfunc(a: &i32, b: &i32) -> std::cmp::Ordering {a.cmp(b)}
fn len(arr: &[i32]) -> usize {arr.len()}
fn sort(arr: &mut [i32]) {arr.sort_by(cmpfunc);}


fn f_gold(arr: i32 [f32], n: u32, k: u32) {
    for i in 0..k {
        let x = arr[0];
        arr[0..n-1].rotate_left(1);
        arr[n-1] = x;
    } 
}////// LLM Output //////

#[cfg(kani)]
#[kani::proof]
#[kani::unwind(10)]
fn kani_wasm_eq(){ 
		let result = f_gold([unsafe{PARAM1}[0], unsafe{PARAM1}[1]],unsafe{PARAM2}.into(),unsafe{PARAM3}.into());
		let result_prime = f_gold_wasm_thread_unsafe();
		assert_eq!(result, result_prime);
}