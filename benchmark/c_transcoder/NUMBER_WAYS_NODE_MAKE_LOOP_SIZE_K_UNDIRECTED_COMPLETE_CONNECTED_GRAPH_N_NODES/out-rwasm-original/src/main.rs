mod guest_mem_wrapper;

use std::convert::TryInto;


#[derive(Copy, Clone, Debug)]
enum TaggedVal {
    I32(i32),
    I64(i64),
    F32(f32),
    F64(f64),
    Undefined,
}

impl Default for TaggedVal {
    fn default() -> Self {
        TaggedVal::Undefined
    }
}

#[derive(Copy, Clone, Debug, PartialEq, Eq)]
enum ValType {
    I32,
    I64,
    F32,
    F64,
    Undefined,
}

impl From<TaggedVal> for ValType {
    fn from(v: TaggedVal) -> Self {
        match v {
            TaggedVal::I32(_) => ValType::I32,
            TaggedVal::I64(_) => ValType::I64,
            TaggedVal::F32(_) => ValType::F32,
            TaggedVal::F64(_) => ValType::F64,
            TaggedVal::Undefined => ValType::Undefined,
        }
    }
}

macro_rules! tagged_value_conversion {
    ($ty:ty, $try_as:ident, $e:tt) => {
        impl TaggedVal {
            #[inline]
            #[allow(dead_code)]
            fn $try_as(&self) -> Option<$ty> {
                if let $e(v) = self {
                    Some(*v)
                } else {
                    None
                }
            }
        }

        impl From<$ty> for TaggedVal {
            #[inline]
            #[allow(dead_code)]
            fn from(v: $ty) -> Self {
                $e(v)
            }
        }
    };
}

tagged_value_conversion! {i32, try_as_i32, I32}
tagged_value_conversion! {i64, try_as_i64, I64}
tagged_value_conversion! {f32, try_as_f32, F32}
tagged_value_conversion! {f64, try_as_f64, F64}

impl From<u32> for TaggedVal {
    #[inline]
    #[allow(dead_code)]
    fn from(v: u32) -> Self {
        I32(v as i32)
    }
}

impl From<u64> for TaggedVal {
    #[inline]
    #[allow(dead_code)]
    fn from(v: u64) -> Self {
        I64(v as i64)
    }
}

trait SafeFloatConv<T> {
    fn try_to_int(self) -> Option<T>;
}
macro_rules! safe_float_conv {
    ($from:ty, $to:ty) => {
        impl SafeFloatConv<$to> for $from {
            fn try_to_int(self) -> Option<$to> {
                if self.is_finite() {
                    Some(self as $to)
                } else {
                    None
                }
            }
        }
    };
    ($to: ty) => {
        safe_float_conv! {f32, $to}
        safe_float_conv! {f64, $to}
    };
}
safe_float_conv! {i32}
safe_float_conv! {u32}
safe_float_conv! {i64}
safe_float_conv! {u64}

#[allow(unused_imports)]
use TaggedVal::*;


#[allow(dead_code)]
         pub struct WasmModule {
            memory: Vec<u8>,
            globals: Vec<TaggedVal>,
            indirect_call_table: Vec<Option<usize>>,
            context: wasi_common::WasiCtx,
         }

macro_rules! memory_accessors {
    ($ty:ty, $read:ident, $write:ident) => {
        #[inline]
        #[allow(dead_code)]
        fn $read(memory: &[u8], addr: usize) -> Option<$ty> {
            Some(<$ty>::from_le_bytes(
                memory.get(addr..addr + std::mem::size_of::<$ty>())?
                    .try_into()
                    .ok()?,
            ))
        }

        #[inline]
        #[allow(dead_code)]
        fn $write(memory: &mut [u8], addr: usize, value: $ty) -> Option<()> {
            memory.get_mut(addr..addr + std::mem::size_of::<$ty>())?
                .copy_from_slice(&value.to_le_bytes());
            Some(())
        }
    };
}

memory_accessors! {u8, read_mem_u8, write_mem_u8}
memory_accessors! {u16, read_mem_u16, write_mem_u16}
memory_accessors! {u32, read_mem_u32, write_mem_u32}
memory_accessors! {u64, read_mem_u64, write_mem_u64}

memory_accessors! {i8, read_mem_i8, write_mem_i8}
memory_accessors! {i16, read_mem_i16, write_mem_i16}
memory_accessors! {i32, read_mem_i32, write_mem_i32}
memory_accessors! {i64, read_mem_i64, write_mem_i64}

memory_accessors! {f32, read_mem_f32, write_mem_f32}
memory_accessors! {f64, read_mem_f64, write_mem_f64}


impl WasmModule {
             #[allow(unused_mut)]
             pub fn new() -> Self {
                 let mut m = WasmModule {
                     memory: vec![0u8; 131072],
                     globals: vec![],
                     indirect_call_table: vec![],
                     context: wasi_common::WasiCtx::new(std::env::args())
                  .expect("Unable to initialize WASI context"), };
                 m.globals.resize_with(1, Default::default);
                 m.globals[0] = TaggedVal::from(72896i32);
                 
                 m.memory[1024..7352].copy_from_slice(&[0, 56, 250, 254, 66, 46, 230, 63, 48, 103, 199, 147, 87, 243, 46, 61, 0, 0, 0, 0, 0, 0, 224, 191, 96, 85, 85, 85, 85, 85, 229, 191, 6, 0, 0, 0, 0, 0, 224, 63, 78, 85, 89, 153, 153, 153, 233, 63, 122, 164, 41, 85, 85, 85, 229, 191, 233, 69, 72, 155, 91, 73, 242, 191, 195, 63, 38, 139, 43, 0, 240, 63, 0, 0, 0, 0, 0, 160, 246, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 185, 242, 130, 44, 214, 191, 128, 86, 55, 40, 36, 180, 250, 60, 0, 0, 0, 0, 0, 128, 246, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 88, 191, 189, 209, 213, 191, 32, 247, 224, 216, 8, 165, 28, 189, 0, 0, 0, 0, 0, 96, 246, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 69, 23, 119, 118, 213, 191, 109, 80, 182, 213, 164, 98, 35, 189, 0, 0, 0, 0, 0, 64, 246, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 45, 135, 173, 26, 213, 191, 213, 103, 176, 158, 228, 132, 230, 188, 0, 0, 0, 0, 0, 32, 246, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 119, 149, 95, 190, 212, 191, 224, 62, 41, 147, 105, 27, 4, 189, 0, 0, 0, 0, 0, 0, 246, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 28, 194, 139, 97, 212, 191, 204, 132, 76, 72, 47, 216, 19, 61, 0, 0, 0, 0, 0, 224, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 134, 134, 48, 4, 212, 191, 58, 11, 130, 237, 243, 66, 220, 60, 0, 0, 0, 0, 0, 192, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 105, 85, 76, 166, 211, 191, 96, 148, 81, 134, 198, 177, 32, 61, 0, 0, 0, 0, 0, 160, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 152, 154, 221, 71, 211, 191, 146, 128, 197, 212, 77, 89, 37, 61, 0, 0, 0, 0, 0, 128, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 225, 186, 226, 232, 210, 191, 216, 43, 183, 153, 30, 123, 38, 61, 0, 0, 0, 0, 0, 96, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 222, 19, 90, 137, 210, 191, 63, 176, 207, 182, 20, 202, 21, 61, 0, 0, 0, 0, 0, 96, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 136, 222, 19, 90, 137, 210, 191, 63, 176, 207, 182, 20, 202, 21, 61, 0, 0, 0, 0, 0, 64, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 207, 251, 65, 41, 210, 191, 118, 218, 83, 40, 36, 90, 22, 189, 0, 0, 0, 0, 0, 32, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 152, 105, 193, 152, 200, 209, 191, 4, 84, 231, 104, 188, 175, 31, 189, 0, 0, 0, 0, 0, 0, 245, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 168, 171, 171, 92, 103, 209, 191, 240, 168, 130, 51, 198, 31, 31, 61, 0, 0, 0, 0, 0, 224, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 72, 174, 249, 139, 5, 209, 191, 102, 90, 5, 253, 196, 168, 38, 189, 0, 0, 0, 0, 0, 192, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 115, 226, 36, 163, 208, 191, 14, 3, 244, 126, 238, 107, 12, 189, 0, 0, 0, 0, 0, 160, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 180, 148, 37, 64, 208, 191, 127, 45, 244, 158, 184, 54, 240, 188, 0, 0, 0, 0, 0, 160, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 180, 148, 37, 64, 208, 191, 127, 45, 244, 158, 184, 54, 240, 188, 0, 0, 0, 0, 0, 128, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 94, 109, 24, 185, 207, 191, 135, 60, 153, 171, 42, 87, 13, 61, 0, 0, 0, 0, 0, 96, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 220, 203, 173, 240, 206, 191, 36, 175, 134, 156, 183, 38, 43, 61, 0, 0, 0, 0, 0, 64, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 42, 110, 7, 39, 206, 191, 16, 255, 63, 84, 79, 47, 23, 189, 0, 0, 0, 0, 0, 32, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 79, 107, 33, 92, 205, 191, 27, 104, 202, 187, 145, 186, 33, 61, 0, 0, 0, 0, 0, 0, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 154, 199, 247, 143, 204, 191, 52, 132, 159, 104, 79, 121, 39, 61, 0, 0, 0, 0, 0, 0, 244, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 154, 199, 247, 143, 204, 191, 52, 132, 159, 104, 79, 121, 39, 61, 0, 0, 0, 0, 0, 224, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 45, 116, 134, 194, 203, 191, 143, 183, 139, 49, 176, 78, 25, 61, 0, 0, 0, 0, 0, 192, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 128, 78, 201, 243, 202, 191, 102, 144, 205, 63, 99, 78, 186, 60, 0, 0, 0, 0, 0, 160, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 226, 31, 188, 35, 202, 191, 234, 193, 70, 220, 100, 140, 37, 189, 0, 0, 0, 0, 0, 160, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 226, 31, 188, 35, 202, 191, 234, 193, 70, 220, 100, 140, 37, 189, 0, 0, 0, 0, 0, 128, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 244, 156, 90, 82, 201, 191, 227, 212, 193, 4, 217, 209, 42, 189, 0, 0, 0, 0, 0, 96, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 32, 101, 160, 127, 200, 191, 9, 250, 219, 127, 191, 189, 43, 61, 0, 0, 0, 0, 0, 64, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 16, 2, 137, 171, 199, 191, 88, 74, 83, 114, 144, 219, 43, 61, 0, 0, 0, 0, 0, 64, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 16, 2, 137, 171, 199, 191, 88, 74, 83, 114, 144, 219, 43, 61, 0, 0, 0, 0, 0, 32, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 25, 231, 15, 214, 198, 191, 102, 226, 178, 163, 106, 228, 16, 189, 0, 0, 0, 0, 0, 0, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 167, 112, 48, 255, 197, 191, 57, 80, 16, 159, 67, 158, 30, 189, 0, 0, 0, 0, 0, 0, 243, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 167, 112, 48, 255, 197, 191, 57, 80, 16, 159, 67, 158, 30, 189, 0, 0, 0, 0, 0, 224, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 161, 227, 229, 38, 197, 191, 143, 91, 7, 144, 139, 222, 32, 189, 0, 0, 0, 0, 0, 192, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 203, 108, 43, 77, 196, 191, 60, 120, 53, 97, 193, 12, 23, 61, 0, 0, 0, 0, 0, 192, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 203, 108, 43, 77, 196, 191, 60, 120, 53, 97, 193, 12, 23, 61, 0, 0, 0, 0, 0, 160, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 30, 32, 252, 113, 195, 191, 58, 84, 39, 77, 134, 120, 241, 60, 0, 0, 0, 0, 0, 128, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 31, 248, 82, 149, 194, 191, 8, 196, 113, 23, 48, 141, 36, 189, 0, 0, 0, 0, 0, 96, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 47, 213, 42, 183, 193, 191, 150, 163, 17, 24, 164, 128, 46, 189, 0, 0, 0, 0, 0, 96, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 47, 213, 42, 183, 193, 191, 150, 163, 17, 24, 164, 128, 46, 189, 0, 0, 0, 0, 0, 64, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 208, 124, 126, 215, 192, 191, 244, 91, 232, 136, 150, 105, 10, 61, 0, 0, 0, 0, 0, 64, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 208, 124, 126, 215, 192, 191, 244, 91, 232, 136, 150, 105, 10, 61, 0, 0, 0, 0, 0, 32, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 219, 49, 145, 236, 191, 191, 242, 51, 163, 92, 84, 117, 37, 189, 0, 0, 0, 0, 0, 0, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 110, 7, 39, 190, 191, 60, 0, 240, 42, 44, 52, 42, 61, 0, 0, 0, 0, 0, 0, 242, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 110, 7, 39, 190, 191, 60, 0, 240, 42, 44, 52, 42, 61, 0, 0, 0, 0, 0, 224, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 91, 143, 84, 94, 188, 191, 6, 190, 95, 88, 87, 12, 29, 189, 0, 0, 0, 0, 0, 192, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 74, 58, 109, 146, 186, 191, 200, 170, 91, 232, 53, 57, 37, 61, 0, 0, 0, 0, 0, 192, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 74, 58, 109, 146, 186, 191, 200, 170, 91, 232, 53, 57, 37, 61, 0, 0, 0, 0, 0, 160, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 49, 214, 69, 195, 184, 191, 104, 86, 47, 77, 41, 124, 19, 61, 0, 0, 0, 0, 0, 160, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 49, 214, 69, 195, 184, 191, 104, 86, 47, 77, 41, 124, 19, 61, 0, 0, 0, 0, 0, 128, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 229, 138, 210, 240, 182, 191, 218, 115, 51, 201, 55, 151, 38, 189, 0, 0, 0, 0, 0, 96, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 6, 63, 7, 27, 181, 191, 87, 94, 198, 97, 91, 2, 31, 61, 0, 0, 0, 0, 0, 96, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 6, 63, 7, 27, 181, 191, 87, 94, 198, 97, 91, 2, 31, 61, 0, 0, 0, 0, 0, 64, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 27, 150, 215, 65, 179, 191, 223, 19, 249, 204, 218, 94, 44, 61, 0, 0, 0, 0, 0, 64, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 27, 150, 215, 65, 179, 191, 223, 19, 249, 204, 218, 94, 44, 61, 0, 0, 0, 0, 0, 32, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 163, 238, 54, 101, 177, 191, 9, 163, 143, 118, 94, 124, 20, 61, 0, 0, 0, 0, 0, 0, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 17, 192, 48, 10, 175, 191, 145, 142, 54, 131, 158, 89, 45, 61, 0, 0, 0, 0, 0, 0, 241, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 17, 192, 48, 10, 175, 191, 145, 142, 54, 131, 158, 89, 45, 61, 0, 0, 0, 0, 0, 224, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 25, 113, 221, 66, 171, 191, 76, 112, 214, 229, 122, 130, 28, 61, 0, 0, 0, 0, 0, 224, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 25, 113, 221, 66, 171, 191, 76, 112, 214, 229, 122, 130, 28, 61, 0, 0, 0, 0, 0, 192, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 50, 246, 88, 116, 167, 191, 238, 161, 242, 52, 70, 252, 44, 189, 0, 0, 0, 0, 0, 192, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 50, 246, 88, 116, 167, 191, 238, 161, 242, 52, 70, 252, 44, 189, 0, 0, 0, 0, 0, 160, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 254, 185, 135, 158, 163, 191, 170, 254, 38, 245, 183, 2, 245, 60, 0, 0, 0, 0, 0, 160, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 254, 185, 135, 158, 163, 191, 170, 254, 38, 245, 183, 2, 245, 60, 0, 0, 0, 0, 0, 128, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 14, 155, 130, 159, 191, 228, 9, 126, 124, 38, 128, 41, 189, 0, 0, 0, 0, 0, 128, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 120, 14, 155, 130, 159, 191, 228, 9, 126, 124, 38, 128, 41, 189, 0, 0, 0, 0, 0, 96, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 213, 7, 27, 185, 151, 191, 57, 166, 250, 147, 84, 141, 40, 189, 0, 0, 0, 0, 0, 64, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 176, 168, 192, 143, 191, 156, 166, 211, 246, 124, 30, 223, 188, 0, 0, 0, 0, 0, 64, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 252, 176, 168, 192, 143, 191, 156, 166, 211, 246, 124, 30, 223, 188, 0, 0, 0, 0, 0, 32, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 107, 42, 224, 127, 191, 228, 64, 218, 13, 63, 226, 25, 189, 0, 0, 0, 0, 0, 32, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 107, 42, 224, 127, 191, 228, 64, 218, 13, 63, 226, 25, 189, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 239, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 137, 117, 21, 16, 128, 63, 232, 43, 157, 153, 107, 199, 16, 189, 0, 0, 0, 0, 0, 128, 239, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 147, 88, 86, 32, 144, 63, 210, 247, 226, 6, 91, 220, 35, 189, 0, 0, 0, 0, 0, 64, 239, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 201, 40, 37, 73, 152, 63, 52, 12, 90, 50, 186, 160, 42, 189, 0, 0, 0, 0, 0, 0, 239, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 231, 137, 93, 65, 160, 63, 83, 215, 241, 92, 192, 17, 1, 61, 0, 0, 0, 0, 0, 192, 238, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 212, 174, 102, 164, 63, 40, 253, 189, 117, 115, 22, 44, 189, 0, 0, 0, 0, 0, 128, 238, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 159, 20, 170, 148, 168, 63, 125, 38, 90, 208, 149, 121, 25, 189, 0, 0, 0, 0, 0, 64, 238, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 221, 205, 115, 203, 172, 63, 7, 40, 216, 71, 242, 104, 26, 189, 0, 0, 0, 0, 0, 32, 238, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 6, 192, 49, 234, 174, 63, 123, 59, 201, 79, 62, 17, 14, 189, 0, 0, 0, 0, 0, 224, 237, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 70, 209, 59, 151, 177, 63, 155, 158, 13, 86, 93, 50, 37, 189, 0, 0, 0, 0, 0, 160, 237, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 209, 167, 245, 189, 179, 63, 215, 78, 219, 165, 94, 200, 44, 61, 0, 0, 0, 0, 0, 96, 237, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 151, 77, 90, 233, 181, 63, 30, 29, 93, 60, 6, 105, 44, 189, 0, 0, 0, 0, 0, 64, 237, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 234, 10, 211, 0, 183, 63, 50, 237, 157, 169, 141, 30, 236, 60, 0, 0, 0, 0, 0, 0, 237, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 89, 93, 94, 51, 185, 63, 218, 71, 189, 58, 92, 17, 35, 61, 0, 0, 0, 0, 0, 192, 236, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 173, 141, 200, 106, 187, 63, 229, 104, 247, 43, 128, 144, 19, 189, 0, 0, 0, 0, 0, 160, 236, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 188, 1, 88, 136, 188, 63, 211, 172, 90, 198, 209, 70, 38, 61, 0, 0, 0, 0, 0, 96, 236, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 10, 131, 57, 199, 190, 63, 224, 69, 230, 175, 104, 192, 45, 189, 0, 0, 0, 0, 0, 64, 236, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 219, 57, 145, 232, 191, 63, 253, 10, 161, 79, 214, 52, 37, 189, 0, 0, 0, 0, 0, 0, 236, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 39, 130, 142, 23, 193, 63, 242, 7, 45, 206, 120, 239, 33, 61, 0, 0, 0, 0, 0, 224, 235, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 35, 126, 43, 170, 193, 63, 52, 153, 56, 68, 142, 167, 44, 61, 0, 0, 0, 0, 0, 160, 235, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 134, 12, 97, 209, 194, 63, 161, 180, 129, 203, 108, 157, 3, 61, 0, 0, 0, 0, 0, 128, 235, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 21, 176, 252, 101, 195, 63, 137, 114, 75, 35, 168, 47, 198, 60, 0, 0, 0, 0, 0, 64, 235, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 51, 131, 61, 145, 196, 63, 120, 182, 253, 84, 121, 131, 37, 61, 0, 0, 0, 0, 0, 32, 235, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 161, 228, 229, 39, 197, 63, 199, 125, 105, 229, 232, 51, 38, 61, 0, 0, 0, 0, 0, 224, 234, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 140, 190, 78, 87, 198, 63, 120, 46, 60, 44, 139, 207, 25, 61, 0, 0, 0, 0, 0, 192, 234, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 112, 117, 139, 18, 240, 198, 63, 225, 33, 156, 229, 141, 17, 37, 189, 0, 0, 0, 0, 0, 160, 234, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 80, 68, 133, 141, 137, 199, 63, 5, 67, 145, 112, 16, 102, 28, 189, 0, 0, 0, 0, 0, 96, 234, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 235, 175, 190, 200, 63, 209, 44, 233, 170, 84, 61, 7, 189, 0, 0, 0, 0, 0, 64, 234, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 247, 220, 90, 90, 201, 63, 111, 255, 160, 88, 40, 242, 7, 61, 0, 0, 0, 0, 0, 0, 234, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 138, 60, 237, 147, 202, 63, 105, 33, 86, 80, 67, 114, 40, 189, 0, 0, 0, 0, 0, 224, 233, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 91, 87, 216, 49, 203, 63, 170, 225, 172, 78, 141, 53, 12, 189, 0, 0, 0, 0, 0, 192, 233, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 224, 59, 56, 135, 208, 203, 63, 182, 18, 84, 89, 196, 75, 45, 189, 0, 0, 0, 0, 0, 160, 233, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 240, 198, 251, 111, 204, 63, 210, 43, 150, 197, 114, 236, 241, 188, 0, 0, 0, 0, 0, 96, 233, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 212, 176, 61, 177, 205, 63, 53, 176, 21, 247, 42, 255, 42, 189, 0, 0, 0, 0, 0, 64, 233, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 231, 255, 14, 83, 206, 63, 48, 244, 65, 96, 39, 18, 194, 60, 0, 0, 0, 0, 0, 32, 233, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 221, 228, 173, 245, 206, 63, 17, 142, 187, 101, 21, 33, 202, 188, 0, 0, 0, 0, 0, 0, 233, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 176, 179, 108, 28, 153, 207, 63, 48, 223, 12, 202, 236, 203, 27, 61, 0, 0, 0, 0, 0, 192, 232, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 88, 77, 96, 56, 113, 208, 63, 145, 78, 237, 22, 219, 156, 248, 60, 0, 0, 0, 0, 0, 160, 232, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 97, 103, 45, 196, 208, 63, 233, 234, 60, 22, 139, 24, 39, 61, 0, 0, 0, 0, 0, 128, 232, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 39, 130, 142, 23, 209, 63, 28, 240, 165, 99, 14, 33, 44, 189, 0, 0, 0, 0, 0, 96, 232, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 248, 172, 203, 92, 107, 209, 63, 129, 22, 165, 247, 205, 154, 43, 61, 0, 0, 0, 0, 0, 64, 232, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 90, 99, 153, 191, 209, 63, 183, 189, 71, 81, 237, 166, 44, 61, 0, 0, 0, 0, 0, 32, 232, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 14, 109, 69, 20, 210, 63, 234, 186, 70, 186, 222, 135, 10, 61, 0, 0, 0, 0, 0, 224, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 144, 220, 124, 240, 190, 210, 63, 244, 4, 80, 74, 250, 156, 42, 61, 0, 0, 0, 0, 0, 192, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 211, 225, 241, 20, 211, 63, 184, 60, 33, 211, 122, 226, 40, 189, 0, 0, 0, 0, 0, 160, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 190, 118, 103, 107, 211, 63, 200, 119, 241, 176, 205, 110, 17, 61, 0, 0, 0, 0, 0, 128, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 51, 119, 82, 194, 211, 63, 92, 189, 6, 182, 84, 59, 24, 61, 0, 0, 0, 0, 0, 96, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 232, 213, 35, 180, 25, 212, 63, 157, 224, 144, 236, 54, 228, 8, 61, 0, 0, 0, 0, 0, 64, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 113, 194, 141, 113, 212, 63, 117, 214, 103, 9, 206, 39, 47, 189, 0, 0, 0, 0, 0, 32, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 23, 158, 224, 201, 212, 63, 164, 216, 10, 27, 137, 32, 46, 189, 0, 0, 0, 0, 0, 0, 231, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 160, 56, 7, 174, 34, 213, 63, 89, 199, 100, 129, 112, 190, 46, 61, 0, 0, 0, 0, 0, 224, 230, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 200, 83, 247, 123, 213, 63, 239, 64, 93, 238, 237, 173, 31, 61, 0, 0, 0, 0, 0, 192, 230, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 89, 223, 189, 213, 213, 63, 220, 101, 164, 8, 42, 11, 10, 189, 254, 130, 43, 101, 71, 21, 103, 64, 0, 0, 0, 0, 0, 0, 56, 67, 0, 0, 250, 254, 66, 46, 118, 191, 58, 59, 158, 188, 154, 247, 12, 189, 189, 253, 255, 255, 255, 255, 223, 63, 60, 84, 85, 85, 85, 85, 197, 63, 145, 43, 23, 207, 85, 85, 165, 63, 23, 208, 164, 103, 17, 17, 129, 63, 0, 0, 0, 0, 0, 0, 200, 66, 239, 57, 250, 254, 66, 46, 230, 63, 36, 196, 130, 255, 189, 191, 206, 63, 181, 244, 12, 215, 8, 107, 172, 63, 204, 80, 70, 210, 171, 178, 131, 63, 132, 58, 78, 155, 224, 215, 85, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 240, 63, 110, 191, 136, 26, 79, 59, 155, 60, 53, 51, 251, 169, 61, 246, 239, 63, 93, 220, 216, 156, 19, 96, 113, 188, 97, 128, 119, 62, 154, 236, 239, 63, 209, 102, 135, 16, 122, 94, 144, 188, 133, 127, 110, 232, 21, 227, 239, 63, 19, 246, 103, 53, 82, 210, 140, 60, 116, 133, 21, 211, 176, 217, 239, 63, 250, 142, 249, 35, 128, 206, 139, 188, 222, 246, 221, 41, 107, 208, 239, 63, 97, 200, 230, 97, 78, 247, 96, 60, 200, 155, 117, 24, 69, 199, 239, 63, 153, 211, 51, 91, 228, 163, 144, 60, 131, 243, 198, 202, 62, 190, 239, 63, 109, 123, 131, 93, 166, 154, 151, 60, 15, 137, 249, 108, 88, 181, 239, 63, 252, 239, 253, 146, 26, 181, 142, 60, 247, 71, 114, 43, 146, 172, 239, 63, 209, 156, 47, 112, 61, 190, 62, 60, 162, 209, 211, 50, 236, 163, 239, 63, 11, 110, 144, 137, 52, 3, 106, 188, 27, 211, 254, 175, 102, 155, 239, 63, 14, 189, 47, 42, 82, 86, 149, 188, 81, 91, 18, 208, 1, 147, 239, 63, 85, 234, 78, 140, 239, 128, 80, 188, 204, 49, 108, 192, 189, 138, 239, 63, 22, 244, 213, 185, 35, 201, 145, 188, 224, 45, 169, 174, 154, 130, 239, 63, 175, 85, 92, 233, 227, 211, 128, 60, 81, 142, 165, 200, 152, 122, 239, 63, 72, 147, 165, 234, 21, 27, 128, 188, 123, 81, 125, 60, 184, 114, 239, 63, 61, 50, 222, 85, 240, 31, 143, 188, 234, 141, 140, 56, 249, 106, 239, 63, 191, 83, 19, 63, 140, 137, 139, 60, 117, 203, 111, 235, 91, 99, 239, 63, 38, 235, 17, 118, 156, 217, 150, 188, 212, 92, 4, 132, 224, 91, 239, 63, 96, 47, 58, 62, 247, 236, 154, 60, 170, 185, 104, 49, 135, 84, 239, 63, 157, 56, 134, 203, 130, 231, 143, 188, 29, 217, 252, 34, 80, 77, 239, 63, 141, 195, 166, 68, 65, 111, 138, 60, 214, 140, 98, 136, 59, 70, 239, 63, 125, 4, 228, 176, 5, 122, 128, 60, 150, 220, 125, 145, 73, 63, 239, 63, 148, 168, 168, 227, 253, 142, 150, 60, 56, 98, 117, 110, 122, 56, 239, 63, 125, 72, 116, 242, 24, 94, 135, 60, 63, 166, 178, 79, 206, 49, 239, 63, 242, 231, 31, 152, 43, 71, 128, 60, 221, 124, 226, 101, 69, 43, 239, 63, 94, 8, 113, 63, 123, 184, 150, 188, 129, 99, 245, 225, 223, 36, 239, 63, 49, 171, 9, 109, 225, 247, 130, 60, 225, 222, 31, 245, 157, 30, 239, 63, 250, 191, 111, 26, 155, 33, 61, 188, 144, 217, 218, 208, 127, 24, 239, 63, 180, 10, 12, 114, 130, 55, 139, 60, 11, 3, 228, 166, 133, 18, 239, 63, 143, 203, 206, 137, 146, 20, 110, 60, 86, 47, 62, 169, 175, 12, 239, 63, 182, 171, 176, 77, 117, 77, 131, 60, 21, 183, 49, 10, 254, 6, 239, 63, 76, 116, 172, 226, 1, 66, 134, 60, 49, 216, 76, 252, 112, 1, 239, 63, 74, 248, 211, 93, 57, 221, 143, 60, 255, 22, 100, 178, 8, 252, 238, 63, 4, 91, 142, 59, 128, 163, 134, 188, 241, 159, 146, 95, 197, 246, 238, 63, 104, 80, 75, 204, 237, 74, 146, 188, 203, 169, 58, 55, 167, 241, 238, 63, 142, 45, 81, 27, 248, 7, 153, 188, 102, 216, 5, 109, 174, 236, 238, 63, 210, 54, 148, 62, 232, 209, 113, 188, 247, 159, 229, 52, 219, 231, 238, 63, 21, 27, 206, 179, 25, 25, 153, 188, 229, 168, 19, 195, 45, 227, 238, 63, 109, 76, 42, 167, 72, 159, 133, 60, 34, 52, 18, 76, 166, 222, 238, 63, 138, 105, 40, 122, 96, 18, 147, 188, 28, 128, 172, 4, 69, 218, 238, 63, 91, 137, 23, 72, 143, 167, 88, 188, 42, 46, 247, 33, 10, 214, 238, 63, 27, 154, 73, 103, 155, 44, 124, 188, 151, 168, 80, 217, 245, 209, 238, 63, 17, 172, 194, 96, 237, 99, 67, 60, 45, 137, 97, 96, 8, 206, 238, 63, 239, 100, 6, 59, 9, 102, 150, 60, 87, 0, 29, 237, 65, 202, 238, 63, 121, 3, 161, 218, 225, 204, 110, 60, 208, 60, 193, 181, 162, 198, 238, 63, 48, 18, 15, 63, 142, 255, 147, 60, 222, 211, 215, 240, 42, 195, 238, 63, 176, 175, 122, 187, 206, 144, 118, 60, 39, 42, 54, 213, 218, 191, 238, 63, 119, 224, 84, 235, 189, 29, 147, 60, 13, 221, 253, 153, 178, 188, 238, 63, 142, 163, 113, 0, 52, 148, 143, 188, 167, 44, 157, 118, 178, 185, 238, 63, 73, 163, 147, 220, 204, 222, 135, 188, 66, 102, 207, 162, 218, 182, 238, 63, 95, 56, 15, 189, 198, 222, 120, 188, 130, 79, 157, 86, 43, 180, 238, 63, 246, 92, 123, 236, 70, 18, 134, 188, 15, 146, 93, 202, 164, 177, 238, 63, 142, 215, 253, 24, 5, 53, 147, 60, 218, 39, 181, 54, 71, 175, 238, 63, 5, 155, 138, 47, 183, 152, 123, 60, 253, 199, 151, 212, 18, 173, 238, 63, 9, 84, 28, 226, 225, 99, 144, 60, 41, 84, 72, 221, 7, 171, 238, 63, 234, 198, 25, 80, 133, 199, 52, 60, 183, 70, 89, 138, 38, 169, 238, 63, 53, 192, 100, 43, 230, 50, 148, 60, 72, 33, 173, 21, 111, 167, 238, 63, 159, 118, 153, 97, 74, 228, 140, 188, 9, 220, 118, 185, 225, 165, 238, 63, 168, 77, 239, 59, 197, 51, 140, 188, 133, 85, 58, 176, 126, 164, 238, 63, 174, 233, 43, 137, 120, 83, 132, 188, 32, 195, 204, 52, 70, 163, 238, 63, 88, 88, 86, 120, 221, 206, 147, 188, 37, 34, 85, 130, 56, 162, 238, 63, 100, 25, 126, 128, 170, 16, 87, 60, 115, 169, 76, 212, 85, 161, 238, 63, 40, 34, 94, 191, 239, 179, 147, 188, 205, 59, 127, 102, 158, 160, 238, 63, 130, 185, 52, 135, 173, 18, 106, 188, 191, 218, 11, 117, 18, 160, 238, 63, 238, 169, 109, 184, 239, 103, 99, 188, 47, 26, 101, 60, 178, 159, 238, 63, 81, 136, 224, 84, 61, 220, 128, 188, 132, 148, 81, 249, 125, 159, 238, 63, 207, 62, 90, 126, 100, 31, 120, 188, 116, 95, 236, 232, 117, 159, 238, 63, 176, 125, 139, 192, 74, 238, 134, 188, 116, 129, 165, 72, 154, 159, 238, 63, 138, 230, 85, 30, 50, 25, 134, 188, 201, 103, 66, 86, 235, 159, 238, 63, 211, 212, 9, 94, 203, 156, 144, 60, 63, 93, 222, 79, 105, 160, 238, 63, 29, 165, 77, 185, 220, 50, 123, 188, 135, 1, 235, 115, 20, 161, 238, 63, 107, 192, 103, 84, 253, 236, 148, 60, 50, 193, 48, 1, 237, 161, 238, 63, 85, 108, 214, 171, 225, 235, 101, 60, 98, 78, 207, 54, 243, 162, 238, 63, 66, 207, 179, 47, 197, 161, 136, 188, 18, 26, 62, 84, 39, 164, 238, 63, 52, 55, 59, 241, 182, 105, 147, 188, 19, 206, 76, 153, 137, 165, 238, 63, 30, 255, 25, 58, 132, 94, 128, 188, 173, 199, 35, 70, 26, 167, 238, 63, 110, 87, 114, 216, 80, 212, 148, 188, 237, 146, 68, 155, 217, 168, 238, 63, 0, 138, 14, 91, 103, 173, 144, 60, 153, 102, 138, 217, 199, 170, 238, 63, 180, 234, 240, 193, 47, 183, 141, 60, 219, 160, 42, 66, 229, 172, 238, 63, 255, 231, 197, 156, 96, 182, 101, 188, 140, 68, 181, 22, 50, 175, 238, 63, 68, 95, 243, 89, 131, 246, 123, 60, 54, 119, 21, 153, 174, 177, 238, 63, 131, 61, 30, 167, 31, 9, 147, 188, 198, 255, 145, 11, 91, 180, 238, 63, 41, 30, 108, 139, 184, 169, 93, 188, 229, 197, 205, 176, 55, 183, 238, 63, 89, 185, 144, 124, 249, 35, 108, 188, 15, 82, 200, 203, 68, 186, 238, 63, 170, 249, 244, 34, 67, 67, 146, 188, 80, 78, 222, 159, 130, 189, 238, 63, 75, 142, 102, 215, 108, 202, 133, 188, 186, 7, 202, 112, 241, 192, 238, 63, 39, 206, 145, 43, 252, 175, 113, 60, 144, 240, 163, 130, 145, 196, 238, 63, 187, 115, 10, 225, 53, 210, 109, 60, 35, 35, 227, 25, 99, 200, 238, 63, 99, 34, 98, 34, 4, 197, 135, 188, 101, 229, 93, 123, 102, 204, 238, 63, 213, 49, 226, 227, 134, 28, 139, 60, 51, 45, 74, 236, 155, 208, 238, 63, 21, 187, 188, 211, 209, 187, 145, 188, 93, 37, 62, 178, 3, 213, 238, 63, 210, 49, 238, 156, 49, 204, 144, 60, 88, 179, 48, 19, 158, 217, 238, 63, 179, 90, 115, 110, 132, 105, 132, 60, 191, 253, 121, 85, 107, 222, 238, 63, 180, 157, 142, 151, 205, 223, 130, 188, 122, 243, 211, 191, 107, 227, 238, 63, 135, 51, 203, 146, 119, 26, 140, 60, 173, 211, 90, 153, 159, 232, 238, 63, 250, 217, 209, 74, 143, 123, 144, 188, 102, 182, 141, 41, 7, 238, 238, 63, 186, 174, 220, 86, 217, 195, 85, 188, 251, 21, 79, 184, 162, 243, 238, 63, 64, 246, 166, 61, 14, 164, 144, 188, 58, 89, 229, 141, 114, 249, 238, 63, 52, 147, 173, 56, 244, 214, 104, 188, 71, 94, 251, 242, 118, 255, 238, 63, 53, 138, 88, 107, 226, 238, 145, 188, 74, 6, 161, 48, 176, 5, 239, 63, 205, 221, 95, 10, 215, 255, 116, 60, 210, 193, 75, 144, 30, 12, 239, 63, 172, 152, 146, 250, 251, 189, 145, 188, 9, 30, 215, 91, 194, 18, 239, 63, 179, 12, 175, 48, 174, 110, 115, 60, 156, 82, 133, 221, 155, 25, 239, 63, 148, 253, 159, 92, 50, 227, 142, 60, 122, 208, 255, 95, 171, 32, 239, 63, 172, 89, 9, 209, 143, 224, 132, 60, 75, 209, 87, 46, 241, 39, 239, 63, 103, 26, 78, 56, 175, 205, 99, 60, 181, 231, 6, 148, 109, 47, 239, 63, 104, 25, 146, 108, 44, 107, 103, 60, 105, 144, 239, 220, 32, 55, 239, 63, 210, 181, 204, 131, 24, 138, 128, 188, 250, 195, 93, 85, 11, 63, 239, 63, 111, 250, 255, 63, 93, 173, 143, 188, 124, 137, 7, 74, 45, 71, 239, 63, 73, 169, 117, 56, 174, 13, 144, 188, 242, 137, 13, 8, 135, 79, 239, 63, 167, 7, 61, 166, 133, 163, 116, 60, 135, 164, 251, 220, 24, 88, 239, 63, 15, 34, 64, 32, 158, 145, 130, 188, 152, 131, 201, 22, 227, 96, 239, 63, 172, 146, 193, 213, 80, 90, 142, 60, 133, 50, 219, 3, 230, 105, 239, 63, 75, 107, 1, 172, 89, 58, 132, 60, 96, 180, 1, 243, 33, 115, 239, 63, 31, 62, 180, 7, 33, 213, 130, 188, 95, 155, 123, 51, 151, 124, 239, 63, 201, 13, 71, 59, 185, 42, 137, 188, 41, 161, 245, 20, 70, 134, 239, 63, 211, 136, 58, 96, 4, 182, 116, 60, 246, 63, 139, 231, 46, 144, 239, 63, 113, 114, 157, 81, 236, 197, 131, 60, 131, 76, 199, 251, 81, 154, 239, 63, 240, 145, 211, 143, 18, 247, 143, 188, 218, 144, 164, 162, 175, 164, 239, 63, 125, 116, 35, 226, 152, 174, 141, 188, 241, 103, 142, 45, 72, 175, 239, 63, 8, 32, 170, 65, 188, 195, 142, 60, 39, 90, 97, 238, 27, 186, 239, 63, 50, 235, 169, 195, 148, 43, 132, 60, 151, 186, 107, 55, 43, 197, 239, 63, 238, 133, 209, 49, 169, 100, 138, 60, 64, 69, 110, 91, 118, 208, 239, 63, 237, 227, 59, 228, 186, 55, 142, 188, 20, 190, 156, 173, 253, 219, 239, 63, 157, 205, 145, 77, 59, 137, 119, 60, 216, 144, 158, 129, 193, 231, 239, 63, 137, 204, 96, 65, 193, 5, 83, 60, 241, 113, 143, 43, 194, 243, 239, 63]);
                 m
             }
         }

impl WasmModule {
#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_0(&mut self, arg_0: i32) -> Option<()> {
std::process::exit(arg_0)}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_1(&mut self, ) -> Option<()> {
Some(())}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_2(&mut self, ) -> Option<()> {
let mut local_0 : i32 = 0i32;let mut v0: TaggedVal;self.func_1()?;
v0 = TaggedVal::from(self.func_4()?);
local_0 = v0.try_as_i32()?;
self.func_6()?;
'label_0: loop {
v0 = TaggedVal::from(local_0);
v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_0;
}
v0 = TaggedVal::from(local_0);
self.func_0(v0.try_as_i32()?)?;
unreachable!("Reached a point explicitly marked unreachable in WASM module");
break;
}Some(())}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_3(&mut self, arg_0: i32, arg_1: i32) -> Option<i32> {
let mut local_0 : i32 = arg_0;
let mut local_1 : i32 = arg_1;let mut local_2 : i32 = 0i32;
let mut local_3 : i32 = 0i32;
let mut local_4 : i32 = 0i32;
let mut local_5 : i32 = 0i32;
let mut local_6 : i32 = 0i32;
let mut local_7 : i32 = 0i32;
let mut local_8 : i32 = 0i32;
let mut local_9 : i32 = 0i32;
let mut local_10 : i32 = 0i32;
let mut local_11 : i32 = 0i32;
let mut local_12 : i32 = 0i32;
let mut local_13 : f64 = 0f64;
let mut local_14 : i32 = 0i32;
let mut local_15 : f64 = 0f64;
let mut local_16 : f64 = 0f64;
let mut local_17 : i32 = 0i32;
let mut local_18 : i32 = 0i32;
let mut local_19 : i32 = 0i32;
let mut local_20 : i32 = 0i32;
let mut local_21 : i32 = 0i32;
let mut local_22 : f64 = 0f64;
let mut local_23 : f64 = 0f64;
let mut local_24 : i32 = 0i32;
let mut local_25 : f64 = 0f64;
let mut local_26 : f64 = 0f64;
let mut local_27 : f64 = 0f64;
let mut local_28 : f64 = 0f64;
let mut local_29 : i32 = 0i32;
let mut local_30 : i32 = 0i32;
let mut local_31 : i32 = 0i32;
let mut local_32 : i32 = 0i32;
let mut local_33 : i32 = 0i32;
let mut local_34 : i32 = 0i32;
let mut local_35 : i32 = 0i32;
let mut local_36 : i32 = 0i32;let mut v0: TaggedVal;
let mut v1: TaggedVal;v0 = self.globals[0];
local_2 = v0.try_as_i32()?;
v0 = TaggedVal::from(16i32);
local_3 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_2);
v1 = TaggedVal::from(local_3);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
local_4 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_4);
self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
v0 = TaggedVal::from(1i32);
local_5 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(local_0);
write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 12) as usize, v1.try_as_i32()?)?;
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(local_1);
write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 8) as usize, v1.try_as_i32()?)?;
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(local_5);
write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
v0 = TaggedVal::from(local_4);
v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
local_6 = v0.try_as_i32()?;
v0 = TaggedVal::from(2i32);
local_7 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(local_7);
v0 = TaggedVal::from(v0.try_as_i32()?.checked_rem(v1.try_as_i32()?)?);
local_8 = v0.try_as_i32()?;
'label_0: loop {
v0 = TaggedVal::from(local_8);
v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_0;
}
v0 = TaggedVal::from(-1i32);
local_9 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(local_9);
write_mem_i32(&mut self.memory, (v0.try_as_i32()? + 4) as usize, v1.try_as_i32()?)?;
break;
}
v0 = TaggedVal::from(local_4);
v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 12) as usize)?);
local_10 = v0.try_as_i32()?;
v0 = TaggedVal::from(1i32);
local_11 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_10);
v1 = TaggedVal::from(local_11);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
local_12 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_12);
v0 = TaggedVal::from((v0.try_as_i32()? as f64));
local_13 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_4);
v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 8) as usize)?);
local_14 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_14);
v0 = TaggedVal::from((v0.try_as_i32()? as f64));
local_15 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_13);
v1 = TaggedVal::from(local_15);
v0 = TaggedVal::from(self.func_7(v0.try_as_f64()?, v1.try_as_f64()?)?);
local_16 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_4);
v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 4) as usize)?);
local_17 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_4);
v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 12) as usize)?);
local_18 = v0.try_as_i32()?;
v0 = TaggedVal::from(1i32);
local_19 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_18);
v1 = TaggedVal::from(local_19);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_sub(v1.try_as_i32()?));
local_20 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_17);
v1 = TaggedVal::from(local_20);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_mul(v1.try_as_i32()?));
local_21 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_21);
v0 = TaggedVal::from((v0.try_as_i32()? as f64));
local_22 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_16);
v1 = TaggedVal::from(local_22);
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
local_23 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_4);
v0 = TaggedVal::from(read_mem_i32(&self.memory, (v0.try_as_i32()? + 12) as usize)?);
local_24 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_24);
v0 = TaggedVal::from((v0.try_as_i32()? as f64));
local_25 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_23);
v1 = TaggedVal::from(local_25);
v0 = TaggedVal::from(v0.try_as_f64()? / v1.try_as_f64()?);
local_26 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_26);
v0 = TaggedVal::from(v0.try_as_f64()?.abs());
local_27 = v0.try_as_f64()?;
v0 = TaggedVal::from(2147483648f64);
local_28 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_27);
v1 = TaggedVal::from(local_28);
v0 = TaggedVal::from((v0.try_as_f64()? < v1.try_as_f64()?) as i32);
local_29 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_29);
v0 = TaggedVal::from((v0.try_as_i32()? == 0) as i32);
local_30 = v0.try_as_i32()?;
'label_1: loop {
'label_2: loop {
v0 = TaggedVal::from(local_30);
if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
v0 = TaggedVal::from(local_26);
v0 = TaggedVal::from(<_ as SafeFloatConv<i32>>::try_to_int(v0.try_as_f64()?.trunc())?);
local_31 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_31);
local_32 = v0.try_as_i32()?;
{

}
break 'label_1;
break;
}
v0 = TaggedVal::from(-2147483648i32);
local_33 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_33);
local_32 = v0.try_as_i32()?;
break;
}
v0 = TaggedVal::from(local_32);
local_34 = v0.try_as_i32()?;
v0 = TaggedVal::from(16i32);
local_35 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(local_35);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
local_36 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_36);
self.globals[0] = TaggedVal::from(v0.try_as_i32()?);
v0 = TaggedVal::from(local_34);
return Some(v0.try_as_i32()?);// no implicit return
}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_4(&mut self, ) -> Option<i32> {
let mut local_0 : i32 = 0i32;
let mut local_1 : i32 = 0i32;
let mut local_2 : i32 = 0i32;let mut v0: TaggedVal;
let mut v1: TaggedVal;v0 = TaggedVal::from(0i32);
local_0 = v0.try_as_i32()?;
v0 = TaggedVal::from(1i32);
local_1 = v0.try_as_i32()?;
v0 = TaggedVal::from(2i32);
local_2 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_1);
v1 = TaggedVal::from(local_2);
v0 = TaggedVal::from(self.func_3(v0.try_as_i32()?, v1.try_as_i32()?)?);

v0 = TaggedVal::from(local_0);
return Some(v0.try_as_i32()?);// no implicit return
}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_5(&mut self, ) -> Option<()> {
Some(())}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_6(&mut self, ) -> Option<()> {
self.func_5()?;
self.func_5()?;Some(())}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_7(&mut self, arg_0: f64, arg_1: f64) -> Option<f64> {
let mut local_0 : f64 = arg_0;
let mut local_1 : f64 = arg_1;let mut local_2 : i64 = 0i64;
let mut local_3 : i32 = 0i32;
let mut local_4 : i32 = 0i32;
let mut local_5 : i32 = 0i32;
let mut local_6 : i64 = 0i64;
let mut local_7 : i32 = 0i32;
let mut local_8 : i32 = 0i32;
let mut local_9 : i64 = 0i64;
let mut local_10 : f64 = 0f64;
let mut local_11 : f64 = 0f64;
let mut local_12 : f64 = 0f64;
let mut local_13 : f64 = 0f64;
let mut local_14 : f64 = 0f64;
let mut local_15 : f64 = 0f64;
let mut local_16 : f64 = 0f64;
let mut local_17 : f64 = 0f64;
let mut local_18 : f64 = 0f64;let mut v0: TaggedVal;
let mut v1: TaggedVal;
let mut v2: TaggedVal;
let mut v3: TaggedVal;
let mut v4: TaggedVal;
let mut v5: TaggedVal;
let mut v6: TaggedVal;
let mut v7: TaggedVal;
let mut v8: TaggedVal;
let mut v9: TaggedVal;
let mut v10: TaggedVal;v0 = TaggedVal::from(local_1);
v0 = TaggedVal::from((v0.try_as_f64()?.to_bits()));
local_2 = v0.try_as_i64()?;
v1 = TaggedVal::from(52i64);
v0 = TaggedVal::from((v0.try_as_i64()? as u64) >> (v1.try_as_i64()? % 64));
v0 = TaggedVal::from(v0.try_as_i64()? as i32);
local_3 = v0.try_as_i32()?;
v1 = TaggedVal::from(2047i32);
v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
local_4 = v0.try_as_i32()?;
v1 = TaggedVal::from(-958i32);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
local_5 = v0.try_as_i32()?;
'label_0: loop {
'label_1: loop {
'label_2: loop {
'label_3: loop {
v0 = TaggedVal::from(local_0);
v0 = TaggedVal::from((v0.try_as_f64()?.to_bits()));
local_6 = v0.try_as_i64()?;
v1 = TaggedVal::from(52i64);
v0 = TaggedVal::from((v0.try_as_i64()? as u64) >> (v1.try_as_i64()? % 64));
v0 = TaggedVal::from(v0.try_as_i64()? as i32);
local_7 = v0.try_as_i32()?;
v1 = TaggedVal::from(-1i32);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
v1 = TaggedVal::from(2045i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_3;
}
v0 = TaggedVal::from(0i32);
local_8 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_5);
v1 = TaggedVal::from(128i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
break;
}
'label_4: loop {
v0 = TaggedVal::from(local_2);
v1 = TaggedVal::from(1i64);
v0 = TaggedVal::from(v0.try_as_i64()? << (v1.try_as_i64()? % 64));
local_9 = v0.try_as_i64()?;
v1 = TaggedVal::from(-1i64);
v0 = TaggedVal::from(v0.try_as_i64()?.wrapping_add(v1.try_as_i64()?));
v1 = TaggedVal::from(-9007199254740993i64);
v0 = TaggedVal::from(((v0.try_as_i64()? as u64) < (v1.try_as_i64()? as u64)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_4;
}
v0 = TaggedVal::from(1f64);
local_10 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(4607182418800017408i64);
v0 = TaggedVal::from((v0.try_as_i64()? == v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
v0 = TaggedVal::from(local_9);
v0 = TaggedVal::from((v0.try_as_i64()? == 0) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
'label_5: loop {
'label_6: loop {
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(1i64);
v0 = TaggedVal::from(v0.try_as_i64()? << (v1.try_as_i64()? % 64));
local_6 = v0.try_as_i64()?;
v1 = TaggedVal::from(-9007199254740992i64);
v0 = TaggedVal::from(((v0.try_as_i64()? as u64) > (v1.try_as_i64()? as u64)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_6;
}
v0 = TaggedVal::from(local_9);
v1 = TaggedVal::from(-9007199254740991i64);
v0 = TaggedVal::from(((v0.try_as_i64()? as u64) < (v1.try_as_i64()? as u64)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_5;
}
break;
}
v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(local_1);
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(9214364837600034816i64);
v0 = TaggedVal::from((v0.try_as_i64()? == v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
v0 = TaggedVal::from(0f64);
v1 = TaggedVal::from(local_1);
v2 = TaggedVal::from(local_1);
v1 = TaggedVal::from(v1.try_as_f64()? * v2.try_as_f64()?);
v2 = TaggedVal::from(local_2);
v3 = TaggedVal::from(63i64);
v2 = TaggedVal::from((v2.try_as_i64()? as u64) >> (v3.try_as_i64()? % 64));
v2 = TaggedVal::from(v2.try_as_i64()? as i32);
v3 = TaggedVal::from(1i32);
v2 = TaggedVal::from(v2.try_as_i32()? ^ v3.try_as_i32()?);
v3 = TaggedVal::from(local_6);
v4 = TaggedVal::from(9214364837600034816i64);
v3 = TaggedVal::from(((v3.try_as_i64()? as u64) < (v4.try_as_i64()? as u64)) as i32);
v2 = TaggedVal::from((v2.try_as_i32()? == v3.try_as_i32()?) as i32);
if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                 if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
return Some(v0.try_as_f64()?);
break;
}
'label_7: loop {
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(1i64);
v0 = TaggedVal::from(v0.try_as_i64()? << (v1.try_as_i64()? % 64));
v1 = TaggedVal::from(-1i64);
v0 = TaggedVal::from(v0.try_as_i64()?.wrapping_add(v1.try_as_i64()?));
v1 = TaggedVal::from(-9007199254740993i64);
v0 = TaggedVal::from(((v0.try_as_i64()? as u64) < (v1.try_as_i64()? as u64)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_7;
}
v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(local_0);
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
local_10 = v0.try_as_f64()?;
'label_8: loop {
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(-1i64);
v0 = TaggedVal::from((v0.try_as_i64()? > v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_8;
}
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(-1023i32);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
v1 = TaggedVal::from(52i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_8;
}
v0 = TaggedVal::from(local_10);
v1 = TaggedVal::from(local_10);
v2 = TaggedVal::from(local_10);
v2 = TaggedVal::from(-v2.try_as_f64()?);
v3 = TaggedVal::from(1i64);
v4 = TaggedVal::from(1075i32);
v5 = TaggedVal::from(local_4);
v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_sub(v5.try_as_i32()?));
v4 = TaggedVal::from((v4.try_as_i32()? as u32 as u64 as i64));
v3 = TaggedVal::from(v3.try_as_i64()? << (v4.try_as_i64()? % 64));
local_6 = v3.try_as_i64()?;
v4 = TaggedVal::from(-1i64);
v3 = TaggedVal::from(v3.try_as_i64()?.wrapping_add(v4.try_as_i64()?));
v4 = TaggedVal::from(local_2);
v3 = TaggedVal::from(v3.try_as_i64()? & v4.try_as_i64()?);
v4 = TaggedVal::from(0i64);
v3 = TaggedVal::from((v3.try_as_i64()? != v4.try_as_i64()?) as i32);
if ValType::from(v1) != ValType::from(v2) {
                     return None;
                 }
                 if v3.try_as_i32()? != 0 {
                     v1 = v1;
                 } else {
                     v1 = v2;
                 }
v2 = TaggedVal::from(local_6);
v3 = TaggedVal::from(local_2);
v2 = TaggedVal::from(v2.try_as_i64()? & v3.try_as_i64()?);
v2 = TaggedVal::from((v2.try_as_i64()? == 0) as i32);
if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                 if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
local_10 = v0.try_as_f64()?;
break;
}
v0 = TaggedVal::from(local_2);
v1 = TaggedVal::from(-1i64);
v0 = TaggedVal::from((v0.try_as_i64()? > v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
v0 = TaggedVal::from(1f64);
v1 = TaggedVal::from(local_10);
v0 = TaggedVal::from(v0.try_as_f64()? / v1.try_as_f64()?);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(0i32);
local_8 = v0.try_as_i32()?;
'label_9: loop {
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(-1i64);
v0 = TaggedVal::from((v0.try_as_i64()? > v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_9;
}
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(1023i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_0;
}
'label_10: loop {
'label_11: loop {
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(1075i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_11;
}
v0 = TaggedVal::from(1i64);
v1 = TaggedVal::from(1075i32);
v2 = TaggedVal::from(local_4);
v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_sub(v2.try_as_i32()?));
v1 = TaggedVal::from((v1.try_as_i32()? as u32 as u64 as i64));
v0 = TaggedVal::from(v0.try_as_i64()? << (v1.try_as_i64()? % 64));
local_9 = v0.try_as_i64()?;
v1 = TaggedVal::from(-1i64);
v0 = TaggedVal::from(v0.try_as_i64()?.wrapping_add(v1.try_as_i64()?));
v1 = TaggedVal::from(local_2);
v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
v1 = TaggedVal::from(0i64);
v0 = TaggedVal::from((v0.try_as_i64()? != v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_0;
}
v0 = TaggedVal::from(262144i32);
local_8 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_9);
v1 = TaggedVal::from(local_2);
v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
v1 = TaggedVal::from(0i64);
v0 = TaggedVal::from((v0.try_as_i64()? != v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_10;
}
break;
}
v0 = TaggedVal::from(0i32);
local_8 = v0.try_as_i32()?;
break;
}
v0 = TaggedVal::from(local_7);
v1 = TaggedVal::from(2047i32);
v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
local_7 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(9223372036854775807i64);
v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
local_6 = v0.try_as_i64()?;
break;
}
'label_12: loop {
v0 = TaggedVal::from(local_5);
v1 = TaggedVal::from(128i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_12;
}
v0 = TaggedVal::from(1f64);
local_10 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(958i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(4607182418800017408i64);
v0 = TaggedVal::from((v0.try_as_i64()? == v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_1;
}
'label_13: loop {
v0 = TaggedVal::from(local_3);
v1 = TaggedVal::from(2048i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
v1 = TaggedVal::from(local_6);
v2 = TaggedVal::from(4607182418800017409i64);
v1 = TaggedVal::from(((v1.try_as_i64()? as u64) < (v2.try_as_i64()? as u64)) as i32);
v0 = TaggedVal::from((v0.try_as_i32()? == v1.try_as_i32()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_13;
}
v0 = TaggedVal::from(0i32);
v0 = TaggedVal::from(self.func_10(v0.try_as_i32()?)?);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(0i32);
v0 = TaggedVal::from(self.func_8(v0.try_as_i32()?)?);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(local_7);
if v0.try_as_i32()? != 0 {
{

}
break 'label_2;
}
v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(4503599627370496f64);
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
v0 = TaggedVal::from((v0.try_as_f64()?.to_bits()));
v1 = TaggedVal::from(9223372036854775807i64);
v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
v1 = TaggedVal::from(-234187180623265792i64);
v0 = TaggedVal::from(v0.try_as_i64()?.wrapping_add(v1.try_as_i64()?));
local_6 = v0.try_as_i64()?;
break;
}
'label_14: loop {
v0 = TaggedVal::from(local_2);
v1 = TaggedVal::from(-134217728i64);
v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
v0 = TaggedVal::from(f64::from_bits(v0.try_as_i64()? as u64));
local_11 = v0.try_as_f64()?;
v1 = TaggedVal::from(local_6);
v2 = TaggedVal::from(-4604531861337669632i64);
v1 = TaggedVal::from(v1.try_as_i64()?.wrapping_add(v2.try_as_i64()?));
local_2 = v1.try_as_i64()?;
v2 = TaggedVal::from(45i64);
v1 = TaggedVal::from((v1.try_as_i64()? as u64) >> (v2.try_as_i64()? % 64));
v1 = TaggedVal::from(v1.try_as_i64()? as i32);
v2 = TaggedVal::from(127i32);
v1 = TaggedVal::from(v1.try_as_i32()? & v2.try_as_i32()?);
v2 = TaggedVal::from(5i32);
v1 = TaggedVal::from(v1.try_as_i32()? << (v2.try_as_i32()? % 32));
local_5 = v1.try_as_i32()?;
v2 = TaggedVal::from(1112i32);
v1 = TaggedVal::from(v1.try_as_i32()?.wrapping_add(v2.try_as_i32()?));
v1 = TaggedVal::from(read_mem_f64(&self.memory, (v1.try_as_i32()? + 0) as usize)?);
v2 = TaggedVal::from(0i32);
v2 = TaggedVal::from(read_mem_f64(&self.memory, (v2.try_as_i32()? + 1024) as usize)?);
v3 = TaggedVal::from(local_2);
v4 = TaggedVal::from(52i64);
v3 = TaggedVal::from(v3.try_as_i64()? >> (v4.try_as_i64()? % 64));
v3 = TaggedVal::from(v3.try_as_i64()? as i32);
v3 = TaggedVal::from((v3.try_as_i32()? as f64));
local_12 = v3.try_as_f64()?;
v2 = TaggedVal::from(v2.try_as_f64()? * v3.try_as_f64()?);
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
local_13 = v1.try_as_f64()?;
v2 = TaggedVal::from(local_5);
v3 = TaggedVal::from(1096i32);
v2 = TaggedVal::from(v2.try_as_i32()?.wrapping_add(v3.try_as_i32()?));
v2 = TaggedVal::from(read_mem_f64(&self.memory, (v2.try_as_i32()? + 0) as usize)?);
local_0 = v2.try_as_f64()?;
v3 = TaggedVal::from(local_6);
v4 = TaggedVal::from(local_2);
v5 = TaggedVal::from(-4503599627370496i64);
v4 = TaggedVal::from(v4.try_as_i64()? & v5.try_as_i64()?);
v3 = TaggedVal::from(v3.try_as_i64()?.wrapping_sub(v4.try_as_i64()?));
local_6 = v3.try_as_i64()?;
v3 = TaggedVal::from(f64::from_bits(v3.try_as_i64()? as u64));
v4 = TaggedVal::from(local_6);
v5 = TaggedVal::from(2147483648i64);
v4 = TaggedVal::from(v4.try_as_i64()?.wrapping_add(v5.try_as_i64()?));
v5 = TaggedVal::from(-4294967296i64);
v4 = TaggedVal::from(v4.try_as_i64()? & v5.try_as_i64()?);
v4 = TaggedVal::from(f64::from_bits(v4.try_as_i64()? as u64));
local_10 = v4.try_as_f64()?;
v3 = TaggedVal::from(v3.try_as_f64()? - v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? * v3.try_as_f64()?);
local_14 = v2.try_as_f64()?;
v3 = TaggedVal::from(local_0);
v4 = TaggedVal::from(local_10);
v3 = TaggedVal::from(v3.try_as_f64()? * v4.try_as_f64()?);
v4 = TaggedVal::from(-1f64);
v3 = TaggedVal::from(v3.try_as_f64()? + v4.try_as_f64()?);
local_10 = v3.try_as_f64()?;
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
local_0 = v2.try_as_f64()?;
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
local_15 = v1.try_as_f64()?;
v2 = TaggedVal::from(local_10);
v3 = TaggedVal::from(local_10);
v4 = TaggedVal::from(0i32);
v4 = TaggedVal::from(read_mem_f64(&self.memory, (v4.try_as_i32()? + 1040) as usize)?);
local_16 = v4.try_as_f64()?;
v3 = TaggedVal::from(v3.try_as_f64()? * v4.try_as_f64()?);
local_17 = v3.try_as_f64()?;
v2 = TaggedVal::from(v2.try_as_f64()? * v3.try_as_f64()?);
local_10 = v2.try_as_f64()?;
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
local_18 = v1.try_as_f64()?;
v2 = TaggedVal::from(local_10);
v3 = TaggedVal::from(local_15);
v4 = TaggedVal::from(local_18);
v3 = TaggedVal::from(v3.try_as_f64()? - v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v3 = TaggedVal::from(local_14);
v4 = TaggedVal::from(local_17);
v5 = TaggedVal::from(local_16);
v6 = TaggedVal::from(local_0);
v5 = TaggedVal::from(v5.try_as_f64()? * v6.try_as_f64()?);
local_10 = v5.try_as_f64()?;
v4 = TaggedVal::from(v4.try_as_f64()? + v5.try_as_f64()?);
v3 = TaggedVal::from(v3.try_as_f64()? * v4.try_as_f64()?);
v4 = TaggedVal::from(local_5);
v5 = TaggedVal::from(1120i32);
v4 = TaggedVal::from(v4.try_as_i32()?.wrapping_add(v5.try_as_i32()?));
v4 = TaggedVal::from(read_mem_f64(&self.memory, (v4.try_as_i32()? + 0) as usize)?);
v5 = TaggedVal::from(0i32);
v5 = TaggedVal::from(read_mem_f64(&self.memory, (v5.try_as_i32()? + 1032) as usize)?);
v6 = TaggedVal::from(local_12);
v5 = TaggedVal::from(v5.try_as_f64()? * v6.try_as_f64()?);
v4 = TaggedVal::from(v4.try_as_f64()? + v5.try_as_f64()?);
v5 = TaggedVal::from(local_0);
v6 = TaggedVal::from(local_13);
v7 = TaggedVal::from(local_15);
v6 = TaggedVal::from(v6.try_as_f64()? - v7.try_as_f64()?);
v5 = TaggedVal::from(v5.try_as_f64()? + v6.try_as_f64()?);
v4 = TaggedVal::from(v4.try_as_f64()? + v5.try_as_f64()?);
v3 = TaggedVal::from(v3.try_as_f64()? + v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v3 = TaggedVal::from(local_0);
v4 = TaggedVal::from(local_0);
v5 = TaggedVal::from(local_10);
v4 = TaggedVal::from(v4.try_as_f64()? * v5.try_as_f64()?);
local_10 = v4.try_as_f64()?;
v3 = TaggedVal::from(v3.try_as_f64()? * v4.try_as_f64()?);
v4 = TaggedVal::from(0i32);
v4 = TaggedVal::from(read_mem_f64(&self.memory, (v4.try_as_i32()? + 1048) as usize)?);
v5 = TaggedVal::from(local_0);
v6 = TaggedVal::from(0i32);
v6 = TaggedVal::from(read_mem_f64(&self.memory, (v6.try_as_i32()? + 1056) as usize)?);
v5 = TaggedVal::from(v5.try_as_f64()? * v6.try_as_f64()?);
v4 = TaggedVal::from(v4.try_as_f64()? + v5.try_as_f64()?);
v5 = TaggedVal::from(local_10);
v6 = TaggedVal::from(0i32);
v6 = TaggedVal::from(read_mem_f64(&self.memory, (v6.try_as_i32()? + 1064) as usize)?);
v7 = TaggedVal::from(local_0);
v8 = TaggedVal::from(0i32);
v8 = TaggedVal::from(read_mem_f64(&self.memory, (v8.try_as_i32()? + 1072) as usize)?);
v7 = TaggedVal::from(v7.try_as_f64()? * v8.try_as_f64()?);
v6 = TaggedVal::from(v6.try_as_f64()? + v7.try_as_f64()?);
v7 = TaggedVal::from(local_10);
v8 = TaggedVal::from(0i32);
v8 = TaggedVal::from(read_mem_f64(&self.memory, (v8.try_as_i32()? + 1080) as usize)?);
v9 = TaggedVal::from(local_0);
v10 = TaggedVal::from(0i32);
v10 = TaggedVal::from(read_mem_f64(&self.memory, (v10.try_as_i32()? + 1088) as usize)?);
v9 = TaggedVal::from(v9.try_as_f64()? * v10.try_as_f64()?);
v8 = TaggedVal::from(v8.try_as_f64()? + v9.try_as_f64()?);
v7 = TaggedVal::from(v7.try_as_f64()? * v8.try_as_f64()?);
v6 = TaggedVal::from(v6.try_as_f64()? + v7.try_as_f64()?);
v5 = TaggedVal::from(v5.try_as_f64()? * v6.try_as_f64()?);
v4 = TaggedVal::from(v4.try_as_f64()? + v5.try_as_f64()?);
v3 = TaggedVal::from(v3.try_as_f64()? * v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
local_12 = v2.try_as_f64()?;
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
local_0 = v1.try_as_f64()?;
v1 = TaggedVal::from((v1.try_as_f64()?.to_bits()));
v2 = TaggedVal::from(-134217728i64);
v1 = TaggedVal::from(v1.try_as_i64()? & v2.try_as_i64()?);
v1 = TaggedVal::from(f64::from_bits(v1.try_as_i64()? as u64));
local_10 = v1.try_as_f64()?;
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
local_15 = v0.try_as_f64()?;
v0 = TaggedVal::from((v0.try_as_f64()?.to_bits()));
local_6 = v0.try_as_i64()?;
v1 = TaggedVal::from(52i64);
v0 = TaggedVal::from((v0.try_as_i64()? as u64) >> (v1.try_as_i64()? % 64));
v0 = TaggedVal::from(v0.try_as_i64()? as i32);
v1 = TaggedVal::from(2047i32);
v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
local_5 = v0.try_as_i32()?;
v1 = TaggedVal::from(-969i32);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
v1 = TaggedVal::from(63i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_14;
}
'label_15: loop {
v0 = TaggedVal::from(local_5);
v1 = TaggedVal::from(968i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) > (v1.try_as_i32()? as u32)) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_15;
}
v0 = TaggedVal::from(-1f64);
v1 = TaggedVal::from(1f64);
v2 = TaggedVal::from(local_8);
if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                 if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(local_5);
v1 = TaggedVal::from(1033i32);
v0 = TaggedVal::from(((v0.try_as_i32()? as u32) < (v1.try_as_i32()? as u32)) as i32);
local_4 = v0.try_as_i32()?;
v0 = TaggedVal::from(0i32);
local_5 = v0.try_as_i32()?;
v0 = TaggedVal::from(local_4);
if v0.try_as_i32()? != 0 {
{

}
break 'label_14;
}
'label_16: loop {
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(-1i64);
v0 = TaggedVal::from((v0.try_as_i64()? > v1.try_as_i64()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_16;
}
v0 = TaggedVal::from(local_8);
v0 = TaggedVal::from(self.func_8(v0.try_as_i32()?)?);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(local_8);
v0 = TaggedVal::from(self.func_10(v0.try_as_i32()?)?);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(local_15);
v1 = TaggedVal::from(0i32);
v1 = TaggedVal::from(read_mem_f64(&self.memory, (v1.try_as_i32()? + 5192) as usize)?);
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
v1 = TaggedVal::from(0i32);
v1 = TaggedVal::from(read_mem_f64(&self.memory, (v1.try_as_i32()? + 5200) as usize)?);
local_13 = v1.try_as_f64()?;
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
local_14 = v0.try_as_f64()?;
v0 = TaggedVal::from((v0.try_as_f64()?.to_bits()));
local_6 = v0.try_as_i64()?;
v0 = TaggedVal::from(v0.try_as_i64()? as i32);
local_7 = v0.try_as_i32()?;
v1 = TaggedVal::from(4i32);
v0 = TaggedVal::from(v0.try_as_i32()? << (v1.try_as_i32()? % 32));
v1 = TaggedVal::from(2032i32);
v0 = TaggedVal::from(v0.try_as_i32()? & v1.try_as_i32()?);
local_4 = v0.try_as_i32()?;
v1 = TaggedVal::from(5304i32);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
v0 = TaggedVal::from(read_mem_f64(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
v1 = TaggedVal::from(local_1);
v2 = TaggedVal::from(local_11);
v1 = TaggedVal::from(v1.try_as_f64()? - v2.try_as_f64()?);
v2 = TaggedVal::from(local_10);
v1 = TaggedVal::from(v1.try_as_f64()? * v2.try_as_f64()?);
v2 = TaggedVal::from(local_12);
v3 = TaggedVal::from(local_18);
v4 = TaggedVal::from(local_0);
v3 = TaggedVal::from(v3.try_as_f64()? - v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v3 = TaggedVal::from(local_0);
v4 = TaggedVal::from(local_10);
v3 = TaggedVal::from(v3.try_as_f64()? - v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v3 = TaggedVal::from(local_1);
v2 = TaggedVal::from(v2.try_as_f64()? * v3.try_as_f64()?);
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
v2 = TaggedVal::from(local_14);
v3 = TaggedVal::from(local_13);
v2 = TaggedVal::from(v2.try_as_f64()? - v3.try_as_f64()?);
local_0 = v2.try_as_f64()?;
v3 = TaggedVal::from(0i32);
v3 = TaggedVal::from(read_mem_f64(&self.memory, (v3.try_as_i32()? + 5216) as usize)?);
v2 = TaggedVal::from(v2.try_as_f64()? * v3.try_as_f64()?);
v3 = TaggedVal::from(local_15);
v4 = TaggedVal::from(0i32);
v4 = TaggedVal::from(read_mem_f64(&self.memory, (v4.try_as_i32()? + 5208) as usize)?);
v5 = TaggedVal::from(local_0);
v4 = TaggedVal::from(v4.try_as_f64()? * v5.try_as_f64()?);
v3 = TaggedVal::from(v3.try_as_f64()? + v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
local_0 = v1.try_as_f64()?;
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
v1 = TaggedVal::from(local_0);
v2 = TaggedVal::from(local_0);
v1 = TaggedVal::from(v1.try_as_f64()? * v2.try_as_f64()?);
local_1 = v1.try_as_f64()?;
v2 = TaggedVal::from(0i32);
v2 = TaggedVal::from(read_mem_f64(&self.memory, (v2.try_as_i32()? + 5224) as usize)?);
v3 = TaggedVal::from(local_0);
v4 = TaggedVal::from(0i32);
v4 = TaggedVal::from(read_mem_f64(&self.memory, (v4.try_as_i32()? + 5232) as usize)?);
v3 = TaggedVal::from(v3.try_as_f64()? * v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v1 = TaggedVal::from(v1.try_as_f64()? * v2.try_as_f64()?);
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
v1 = TaggedVal::from(local_1);
v2 = TaggedVal::from(local_1);
v1 = TaggedVal::from(v1.try_as_f64()? * v2.try_as_f64()?);
v2 = TaggedVal::from(0i32);
v2 = TaggedVal::from(read_mem_f64(&self.memory, (v2.try_as_i32()? + 5240) as usize)?);
v3 = TaggedVal::from(local_0);
v4 = TaggedVal::from(0i32);
v4 = TaggedVal::from(read_mem_f64(&self.memory, (v4.try_as_i32()? + 5248) as usize)?);
v3 = TaggedVal::from(v3.try_as_f64()? * v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v1 = TaggedVal::from(v1.try_as_f64()? * v2.try_as_f64()?);
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
local_0 = v0.try_as_f64()?;
v0 = TaggedVal::from(local_4);
v1 = TaggedVal::from(8i32);
v0 = TaggedVal::from(v0.try_as_i32()? | v1.try_as_i32()?);
v1 = TaggedVal::from(5304i32);
v0 = TaggedVal::from(v0.try_as_i32()?.wrapping_add(v1.try_as_i32()?));
v0 = TaggedVal::from(read_mem_i64(&self.memory, (v0.try_as_i32()? + 0) as usize)?);
v1 = TaggedVal::from(local_6);
v2 = TaggedVal::from(local_8);
v2 = TaggedVal::from((v2.try_as_i32()? as u32 as u64 as i64));
v1 = TaggedVal::from(v1.try_as_i64()?.wrapping_add(v2.try_as_i64()?));
v2 = TaggedVal::from(45i64);
v1 = TaggedVal::from(v1.try_as_i64()? << (v2.try_as_i64()? % 64));
v0 = TaggedVal::from(v0.try_as_i64()?.wrapping_add(v1.try_as_i64()?));
local_6 = v0.try_as_i64()?;
'label_17: loop {
v0 = TaggedVal::from(local_5);
if v0.try_as_i32()? != 0 {
{

}
break 'label_17;
}
'label_18: loop {
v0 = TaggedVal::from(local_7);
v1 = TaggedVal::from(0i32);
v0 = TaggedVal::from((v0.try_as_i32()? < v1.try_as_i32()?) as i32);
if v0.try_as_i32()? != 0 {
{

}
break 'label_18;
}
v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(local_6);
v2 = TaggedVal::from(-4544132024016830464i64);
v1 = TaggedVal::from(v1.try_as_i64()?.wrapping_add(v2.try_as_i64()?));
v1 = TaggedVal::from(f64::from_bits(v1.try_as_i64()? as u64));
local_1 = v1.try_as_f64()?;
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
v1 = TaggedVal::from(local_1);
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
v1 = TaggedVal::from(5486124068793689000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64);
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
return Some(v0.try_as_f64()?);
break;
}
'label_19: loop {
v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(local_6);
v2 = TaggedVal::from(4602678819172646912i64);
v1 = TaggedVal::from(v1.try_as_i64()?.wrapping_add(v2.try_as_i64()?));
local_6 = v1.try_as_i64()?;
v1 = TaggedVal::from(f64::from_bits(v1.try_as_i64()? as u64));
local_1 = v1.try_as_f64()?;
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
local_10 = v0.try_as_f64()?;
v1 = TaggedVal::from(local_1);
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
local_0 = v0.try_as_f64()?;
v0 = TaggedVal::from(v0.try_as_f64()?.abs());
v1 = TaggedVal::from(1f64);
v0 = TaggedVal::from((v0.try_as_f64()? < v1.try_as_f64()?) as i32);
v1 = TaggedVal::from(1i32);
v0 = TaggedVal::from(v0.try_as_i32()? ^ v1.try_as_i32()?);
if v0.try_as_i32()? != 0 {
{

}
break 'label_19;
}
v0 = TaggedVal::from(local_6);
v1 = TaggedVal::from(-9223372036854775808i64);
v0 = TaggedVal::from(v0.try_as_i64()? & v1.try_as_i64()?);
v0 = TaggedVal::from(f64::from_bits(v0.try_as_i64()? as u64));
v1 = TaggedVal::from(local_0);
v2 = TaggedVal::from(-1f64);
v3 = TaggedVal::from(1f64);
v4 = TaggedVal::from(local_0);
v5 = TaggedVal::from(0f64);
v4 = TaggedVal::from((v4.try_as_f64()? < v5.try_as_f64()?) as i32);
if ValType::from(v2) != ValType::from(v3) {
                     return None;
                 }
                 if v4.try_as_i32()? != 0 {
                     v2 = v2;
                 } else {
                     v2 = v3;
                 }
local_15 = v2.try_as_f64()?;
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
local_18 = v1.try_as_f64()?;
v2 = TaggedVal::from(local_10);
v3 = TaggedVal::from(local_1);
v4 = TaggedVal::from(local_0);
v3 = TaggedVal::from(v3.try_as_f64()? - v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v3 = TaggedVal::from(local_0);
v4 = TaggedVal::from(local_15);
v5 = TaggedVal::from(local_18);
v4 = TaggedVal::from(v4.try_as_f64()? - v5.try_as_f64()?);
v3 = TaggedVal::from(v3.try_as_f64()? + v4.try_as_f64()?);
v2 = TaggedVal::from(v2.try_as_f64()? + v3.try_as_f64()?);
v1 = TaggedVal::from(v1.try_as_f64()? + v2.try_as_f64()?);
v2 = TaggedVal::from(local_15);
v1 = TaggedVal::from(v1.try_as_f64()? - v2.try_as_f64()?);
local_0 = v1.try_as_f64()?;
v2 = TaggedVal::from(local_0);
v3 = TaggedVal::from(0f64);
v2 = TaggedVal::from((v2.try_as_f64()? == v3.try_as_f64()?) as i32);
if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                 if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
local_0 = v0.try_as_f64()?;
break;
}
v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014f64);
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(local_6);
v1 = TaggedVal::from(f64::from_bits(v1.try_as_i64()? as u64));
local_1 = v1.try_as_f64()?;
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);
v1 = TaggedVal::from(local_1);
v0 = TaggedVal::from(v0.try_as_f64()? + v1.try_as_f64()?);
local_10 = v0.try_as_f64()?;
break;
}
v0 = TaggedVal::from(local_10);
return Some(v0.try_as_f64()?);
break;
}
v0 = TaggedVal::from(local_0);
v0 = TaggedVal::from(self.func_11(v0.try_as_f64()?)?);Some(v0.try_as_f64()?)}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_8(&mut self, arg_0: i32) -> Option<f64> {
let mut local_0 : i32 = arg_0;let mut v0: TaggedVal;
let mut v1: TaggedVal;v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(0.0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012882297539194267f64);
v0 = TaggedVal::from(self.func_9(v0.try_as_i32()?, v1.try_as_f64()?)?);Some(v0.try_as_f64()?)}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_9(&mut self, arg_0: i32, arg_1: f64) -> Option<f64> {
let mut local_0 : i32 = arg_0;
let mut local_1 : f64 = arg_1;let mut v0: TaggedVal;
let mut v1: TaggedVal;
let mut v2: TaggedVal;v0 = TaggedVal::from(local_1);
v0 = TaggedVal::from(-v0.try_as_f64()?);
v1 = TaggedVal::from(local_1);
v2 = TaggedVal::from(local_0);
if ValType::from(v0) != ValType::from(v1) {
                     return None;
                 }
                 if v2.try_as_i32()? != 0 {
                     v0 = v0;
                 } else {
                     v0 = v1;
                 }
v1 = TaggedVal::from(local_1);
v0 = TaggedVal::from(v0.try_as_f64()? * v1.try_as_f64()?);Some(v0.try_as_f64()?)}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_10(&mut self, arg_0: i32) -> Option<f64> {
let mut local_0 : i32 = arg_0;let mut v0: TaggedVal;
let mut v1: TaggedVal;v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(3105036184601418000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f64);
v0 = TaggedVal::from(self.func_9(v0.try_as_i32()?, v1.try_as_f64()?)?);Some(v0.try_as_f64()?)}

#[allow(unused_mut, unused_variables, unused_assignments, unused_parens, unreachable_code, unused_labels)]
fn func_11(&mut self, arg_0: f64) -> Option<f64> {
let mut local_0 : f64 = arg_0;let mut v0: TaggedVal;
let mut v1: TaggedVal;v0 = TaggedVal::from(local_0);
v1 = TaggedVal::from(local_0);
v0 = TaggedVal::from(v0.try_as_f64()? - v1.try_as_f64()?);
local_0 = v0.try_as_f64()?;
v1 = TaggedVal::from(local_0);
v0 = TaggedVal::from(v0.try_as_f64()? / v1.try_as_f64()?);Some(v0.try_as_f64()?)}

}

impl WasmModule {
             #[allow(dead_code)]
             fn indirect_call(&mut self, idx: usize, args: &[TaggedVal]) ->
                     Option<Vec<TaggedVal>> {
                 let call_target = (*self.indirect_call_table.get(idx)?)?;
                 match call_target {
                     0 => {
                         if args.len() != 1 {
                             return None;
                         }
                         let a0 = args[0].try_as_i32()?;
                         self.func_0(a0)?;
                         Some(vec![])
                     }
1 => {
                         if args.len() != 0 {
                             return None;
                         }
                         
                         self.func_1()?;
                         Some(vec![])
                     }
2 => {
                         if args.len() != 0 {
                             return None;
                         }
                         
                         self.func_2()?;
                         Some(vec![])
                     }
3 => {
                         if args.len() != 2 {
                             return None;
                         }
                         let a0 = args[0].try_as_i32()?;
let a1 = args[1].try_as_i32()?;
                         let rets = self.func_3(a0, a1)?;
                         Some(vec![TaggedVal::from(rets)])
                     }
4 => {
                         if args.len() != 0 {
                             return None;
                         }
                         
                         let rets = self.func_4()?;
                         Some(vec![TaggedVal::from(rets)])
                     }
5 => {
                         if args.len() != 0 {
                             return None;
                         }
                         
                         self.func_5()?;
                         Some(vec![])
                     }
6 => {
                         if args.len() != 0 {
                             return None;
                         }
                         
                         self.func_6()?;
                         Some(vec![])
                     }
7 => {
                         if args.len() != 2 {
                             return None;
                         }
                         let a0 = args[0].try_as_f64()?;
let a1 = args[1].try_as_f64()?;
                         let rets = self.func_7(a0, a1)?;
                         Some(vec![TaggedVal::from(rets)])
                     }
8 => {
                         if args.len() != 1 {
                             return None;
                         }
                         let a0 = args[0].try_as_i32()?;
                         let rets = self.func_8(a0)?;
                         Some(vec![TaggedVal::from(rets)])
                     }
9 => {
                         if args.len() != 2 {
                             return None;
                         }
                         let a0 = args[0].try_as_i32()?;
let a1 = args[1].try_as_f64()?;
                         let rets = self.func_9(a0, a1)?;
                         Some(vec![TaggedVal::from(rets)])
                     }
10 => {
                         if args.len() != 1 {
                             return None;
                         }
                         let a0 = args[0].try_as_i32()?;
                         let rets = self.func_10(a0)?;
                         Some(vec![TaggedVal::from(rets)])
                     }
11 => {
                         if args.len() != 1 {
                             return None;
                         }
                         let a0 = args[0].try_as_f64()?;
                         let rets = self.func_11(a0)?;
                         Some(vec![TaggedVal::from(rets)])
                     }
                     _ => None,
                 }
             }
         }

impl WasmModule {
                    #[allow(dead_code)]
                    pub fn get_memory(&mut self) -> *mut u8 {
                        self.memory.as_mut_ptr()
                    }
                }

impl WasmModule {
                     pub fn _start(&mut self, ) -> Option<()> {
                         self.func_2()
                     }
                 }
fn main() {
                         let mut wasm_module = WasmModule::new();
                         wasm_module._start().unwrap();
                     }